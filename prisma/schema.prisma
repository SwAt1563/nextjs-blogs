
// Tutorial: https://www.prisma.io/blog/fullstack-nextjs-graphql-prisma-oklidw1rhw
// https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-postgresql


// First step make .env file and add the postgres url

// Second step install the dependencies
// npm install @vercel/postgres
// npm install --save-dev prisma
// npx prisma init

// Third step create the schema.prisma file and add the schema
// Then apply migration and upload to database
// npx prisma migrate dev --name init
// note: (init) just a name u can change it, exp: when make update for a category table
// npx prisma migrate dev --name update-category-table

// optional : npx prisma db push
// for direct push without make migration

// Fourth step generate the client
// npm install @prisma/client

// Fifth step (optional) change package.json and tsconfig.json
// ts-node: in the tsconfig.json file, specify that ts-node will use CommonJS modules
// for upload seed.ts data on the database
// prisma: and Update your package.json file by adding a prisma key with a seed property defining the script for seeding the database
// "prisma": {
//     "seed": "ts-node --compiler-options {\"module\":\"CommonJS\"} prisma/seed.ts"
//   }
// then apply this command
// npm install -D typescript ts-node @types/node


// Sixth step make seed
// npx prisma db seed

// Finally
// watch your database on the prisma studio
// npx prisma studio


generator client {
  provider = "prisma-client-js"
  // https://www.prisma.io/docs/orm/prisma-client/queries/full-text-search
  previewFeatures = ["fullTextSearch", "fullTextIndex"] // enable full-text search

}

// accelerate for cache: example getCategories
// https://console.prisma.io/clqnr07nh01r3yl0u3jx6w2hv/overview
// https://www.prisma.io/docs/accelerate/getting-started
// get the key and add it to the .env file
// npm install @prisma/extension-accelerate

//  For long-running application servers like those on AWS EC2
//  npx prisma generate

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum Role {
  USER 
  ADMIN 
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  username  String   @unique
  imageUrl  String?
  role      Role     @default(USER)
  blogs     Blog[]
  comments  Comment[]
  likes     Like[]
  views     View[]

}


model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  blogs       Blog[]
}

enum Status {
  DRAFT
  PUBLISHED
}


model Blog {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String
  imageUrl    String?
  status      Status   @default(DRAFT)
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
  comments    Comment[]
  likes       Like[]
  views       View[]
  
}

model View {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  @@unique([blogId, userId], name: "UniqueBlogUserView")
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  @@unique([blogId, userId], name: "UniqueBlogUserLike")
}

